using System;
using System.Collections.Generic;
using SharpXpra;
using Xunit;

namespace Tests {
	public class RencodeTests {
		readonly byte[] Data = {
			0xd0, 0xc3, 0x83, 0x66, 0x6f, 0x6f, 0x83, 0x62, 0x61, 0x72, 0x83, 0x62, 0x61, 0x7a, 0x3b, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x68, 0x83, 0x66, 0x6f, 0x6f, 0x83, 0x62, 0x61, 0x72,
			0x83, 0x62, 0x61, 0x7a, 0x83, 0x68, 0x61, 0x78, 0x3c, 0x00, 0x81, 0x30, 0x01, 0x81, 0x31, 0x02,
			0x81, 0x32, 0x03, 0x81, 0x33, 0x04, 0x81, 0x34, 0x05, 0x81, 0x35, 0x06, 0x81, 0x36, 0x07, 0x81,
			0x37, 0x08, 0x81, 0x38, 0x09, 0x81, 0x39, 0x0a, 0x82, 0x31, 0x30, 0x0b, 0x82, 0x31, 0x31, 0x0c,
			0x82, 0x31, 0x32, 0x0d, 0x82, 0x31, 0x33, 0x0e, 0x82, 0x31, 0x34, 0x0f, 0x82, 0x31, 0x35, 0x10,
			0x82, 0x31, 0x36, 0x11, 0x82, 0x31, 0x37, 0x12, 0x82, 0x31, 0x38, 0x13, 0x82, 0x31, 0x39, 0x14,
			0x82, 0x32, 0x30, 0x15, 0x82, 0x32, 0x31, 0x16, 0x82, 0x32, 0x32, 0x17, 0x82, 0x32, 0x33, 0x18,
			0x82, 0x32, 0x34, 0x19, 0x82, 0x32, 0x35, 0x1a, 0x82, 0x32, 0x36, 0x1b, 0x82, 0x32, 0x37, 0x1c,
			0x82, 0x32, 0x38, 0x1d, 0x82, 0x32, 0x39, 0x1e, 0x82, 0x33, 0x30, 0x1f, 0x82, 0x33, 0x31, 0x20,
			0x82, 0x33, 0x32, 0x21, 0x82, 0x33, 0x33, 0x22, 0x82, 0x33, 0x34, 0x23, 0x82, 0x33, 0x35, 0x24,
			0x82, 0x33, 0x36, 0x25, 0x82, 0x33, 0x37, 0x26, 0x82, 0x33, 0x38, 0x27, 0x82, 0x33, 0x39, 0x28,
			0x82, 0x34, 0x30, 0x29, 0x82, 0x34, 0x31, 0x2a, 0x82, 0x34, 0x32, 0x2b, 0x82, 0x34, 0x33, 0x3e,
			0x2c, 0x82, 0x34, 0x34, 0x3e, 0x2d, 0x82, 0x34, 0x35, 0x3e, 0x2e, 0x82, 0x34, 0x36, 0x3e, 0x2f,
			0x82, 0x34, 0x37, 0x3e, 0x30, 0x82, 0x34, 0x38, 0x3e, 0x31, 0x82, 0x34, 0x39, 0x3e, 0x32, 0x82,
			0x35, 0x30, 0x3e, 0x33, 0x82, 0x35, 0x31, 0x3e, 0x34, 0x82, 0x35, 0x32, 0x3e, 0x35, 0x82, 0x35,
			0x33, 0x3e, 0x36, 0x82, 0x35, 0x34, 0x3e, 0x37, 0x82, 0x35, 0x35, 0x3e, 0x38, 0x82, 0x35, 0x36,
			0x3e, 0x39, 0x82, 0x35, 0x37, 0x3e, 0x3a, 0x82, 0x35, 0x38, 0x3e, 0x3b, 0x82, 0x35, 0x39, 0x3e,
			0x3c, 0x82, 0x36, 0x30, 0x3e, 0x3d, 0x82, 0x36, 0x31, 0x3e, 0x3e, 0x82, 0x36, 0x32, 0x3e, 0x3f,
			0x82, 0x36, 0x33, 0x3e, 0x40, 0x82, 0x36, 0x34, 0x3e, 0x41, 0x82, 0x36, 0x35, 0x3e, 0x42, 0x82,
			0x36, 0x36, 0x3e, 0x43, 0x82, 0x36, 0x37, 0x3e, 0x44, 0x82, 0x36, 0x38, 0x3e, 0x45, 0x82, 0x36,
			0x39, 0x3e, 0x46, 0x82, 0x37, 0x30, 0x3e, 0x47, 0x82, 0x37, 0x31, 0x3e, 0x48, 0x82, 0x37, 0x32,
			0x3e, 0x49, 0x82, 0x37, 0x33, 0x3e, 0x4a, 0x82, 0x37, 0x34, 0x3e, 0x4b, 0x82, 0x37, 0x35, 0x3e,
			0x4c, 0x82, 0x37, 0x36, 0x3e, 0x4d, 0x82, 0x37, 0x37, 0x3e, 0x4e, 0x82, 0x37, 0x38, 0x3e, 0x4f,
			0x82, 0x37, 0x39, 0x3e, 0x50, 0x82, 0x38, 0x30, 0x3e, 0x51, 0x82, 0x38, 0x31, 0x3e, 0x52, 0x82,
			0x38, 0x32, 0x3e, 0x53, 0x82, 0x38, 0x33, 0x3e, 0x54, 0x82, 0x38, 0x34, 0x3e, 0x55, 0x82, 0x38,
			0x35, 0x3e, 0x56, 0x82, 0x38, 0x36, 0x3e, 0x57, 0x82, 0x38, 0x37, 0x3e, 0x58, 0x82, 0x38, 0x38,
			0x3e, 0x59, 0x82, 0x38, 0x39, 0x3e, 0x5a, 0x82, 0x39, 0x30, 0x3e, 0x5b, 0x82, 0x39, 0x31, 0x3e,
			0x5c, 0x82, 0x39, 0x32, 0x3e, 0x5d, 0x82, 0x39, 0x33, 0x3e, 0x5e, 0x82, 0x39, 0x34, 0x3e, 0x5f,
			0x82, 0x39, 0x35, 0x3e, 0x60, 0x82, 0x39, 0x36, 0x3e, 0x61, 0x82, 0x39, 0x37, 0x3e, 0x62, 0x82,
			0x39, 0x38, 0x3e, 0x63, 0x82, 0x39, 0x39, 0x3e, 0x64, 0x83, 0x31, 0x30, 0x30, 0x3e, 0x65, 0x83,
			0x31, 0x30, 0x31, 0x3e, 0x66, 0x83, 0x31, 0x30, 0x32, 0x3e, 0x67, 0x83, 0x31, 0x30, 0x33, 0x3e,
			0x68, 0x83, 0x31, 0x30, 0x34, 0x3e, 0x69, 0x83, 0x31, 0x30, 0x35, 0x3e, 0x6a, 0x83, 0x31, 0x30,
			0x36, 0x3e, 0x6b, 0x83, 0x31, 0x30, 0x37, 0x3e, 0x6c, 0x83, 0x31, 0x30, 0x38, 0x3e, 0x6d, 0x83,
			0x31, 0x30, 0x39, 0x3e, 0x6e, 0x83, 0x31, 0x31, 0x30, 0x3e, 0x6f, 0x83, 0x31, 0x31, 0x31, 0x3e,
			0x70, 0x83, 0x31, 0x31, 0x32, 0x3e, 0x71, 0x83, 0x31, 0x31, 0x33, 0x3e, 0x72, 0x83, 0x31, 0x31,
			0x34, 0x3e, 0x73, 0x83, 0x31, 0x31, 0x35, 0x3e, 0x74, 0x83, 0x31, 0x31, 0x36, 0x3e, 0x75, 0x83,
			0x31, 0x31, 0x37, 0x3e, 0x76, 0x83, 0x31, 0x31, 0x38, 0x3e, 0x77, 0x83, 0x31, 0x31, 0x39, 0x3e,
			0x78, 0x83, 0x31, 0x32, 0x30, 0x3e, 0x79, 0x83, 0x31, 0x32, 0x31, 0x3e, 0x7a, 0x83, 0x31, 0x32,
			0x32, 0x3e, 0x7b, 0x83, 0x31, 0x32, 0x33, 0x3e, 0x7c, 0x83, 0x31, 0x32, 0x34, 0x3e, 0x7d, 0x83,
			0x31, 0x32, 0x35, 0x3e, 0x7e, 0x83, 0x31, 0x32, 0x36, 0x3e, 0x7f, 0x83, 0x31, 0x32, 0x37, 0x3f,
			0x00, 0x80, 0x83, 0x31, 0x32, 0x38, 0x3f, 0x00, 0x81, 0x83, 0x31, 0x32, 0x39, 0x3f, 0x00, 0x82,
			0x83, 0x31, 0x33, 0x30, 0x3f, 0x00, 0x83, 0x83, 0x31, 0x33, 0x31, 0x3f, 0x00, 0x84, 0x83, 0x31,
			0x33, 0x32, 0x3f, 0x00, 0x85, 0x83, 0x31, 0x33, 0x33, 0x3f, 0x00, 0x86, 0x83, 0x31, 0x33, 0x34,
			0x3f, 0x00, 0x87, 0x83, 0x31, 0x33, 0x35, 0x3f, 0x00, 0x88, 0x83, 0x31, 0x33, 0x36, 0x3f, 0x00,
			0x89, 0x83, 0x31, 0x33, 0x37, 0x3f, 0x00, 0x8a, 0x83, 0x31, 0x33, 0x38, 0x3f, 0x00, 0x8b, 0x83,
			0x31, 0x33, 0x39, 0x3f, 0x00, 0x8c, 0x83, 0x31, 0x34, 0x30, 0x3f, 0x00, 0x8d, 0x83, 0x31, 0x34,
			0x31, 0x3f, 0x00, 0x8e, 0x83, 0x31, 0x34, 0x32, 0x3f, 0x00, 0x8f, 0x83, 0x31, 0x34, 0x33, 0x3f,
			0x00, 0x90, 0x83, 0x31, 0x34, 0x34, 0x3f, 0x00, 0x91, 0x83, 0x31, 0x34, 0x35, 0x3f, 0x00, 0x92,
			0x83, 0x31, 0x34, 0x36, 0x3f, 0x00, 0x93, 0x83, 0x31, 0x34, 0x37, 0x3f, 0x00, 0x94, 0x83, 0x31,
			0x34, 0x38, 0x3f, 0x00, 0x95, 0x83, 0x31, 0x34, 0x39, 0x3f, 0x00, 0x96, 0x83, 0x31, 0x35, 0x30,
			0x3f, 0x00, 0x97, 0x83, 0x31, 0x35, 0x31, 0x3f, 0x00, 0x98, 0x83, 0x31, 0x35, 0x32, 0x3f, 0x00,
			0x99, 0x83, 0x31, 0x35, 0x33, 0x3f, 0x00, 0x9a, 0x83, 0x31, 0x35, 0x34, 0x3f, 0x00, 0x9b, 0x83,
			0x31, 0x35, 0x35, 0x3f, 0x00, 0x9c, 0x83, 0x31, 0x35, 0x36, 0x3f, 0x00, 0x9d, 0x83, 0x31, 0x35,
			0x37, 0x3f, 0x00, 0x9e, 0x83, 0x31, 0x35, 0x38, 0x3f, 0x00, 0x9f, 0x83, 0x31, 0x35, 0x39, 0x3f,
			0x00, 0xa0, 0x83, 0x31, 0x36, 0x30, 0x3f, 0x00, 0xa1, 0x83, 0x31, 0x36, 0x31, 0x3f, 0x00, 0xa2,
			0x83, 0x31, 0x36, 0x32, 0x3f, 0x00, 0xa3, 0x83, 0x31, 0x36, 0x33, 0x3f, 0x00, 0xa4, 0x83, 0x31,
			0x36, 0x34, 0x3f, 0x00, 0xa5, 0x83, 0x31, 0x36, 0x35, 0x3f, 0x00, 0xa6, 0x83, 0x31, 0x36, 0x36,
			0x3f, 0x00, 0xa7, 0x83, 0x31, 0x36, 0x37, 0x3f, 0x00, 0xa8, 0x83, 0x31, 0x36, 0x38, 0x3f, 0x00,
			0xa9, 0x83, 0x31, 0x36, 0x39, 0x3f, 0x00, 0xaa, 0x83, 0x31, 0x37, 0x30, 0x3f, 0x00, 0xab, 0x83,
			0x31, 0x37, 0x31, 0x3f, 0x00, 0xac, 0x83, 0x31, 0x37, 0x32, 0x3f, 0x00, 0xad, 0x83, 0x31, 0x37,
			0x33, 0x3f, 0x00, 0xae, 0x83, 0x31, 0x37, 0x34, 0x3f, 0x00, 0xaf, 0x83, 0x31, 0x37, 0x35, 0x3f,
			0x00, 0xb0, 0x83, 0x31, 0x37, 0x36, 0x3f, 0x00, 0xb1, 0x83, 0x31, 0x37, 0x37, 0x3f, 0x00, 0xb2,
			0x83, 0x31, 0x37, 0x38, 0x3f, 0x00, 0xb3, 0x83, 0x31, 0x37, 0x39, 0x3f, 0x00, 0xb4, 0x83, 0x31,
			0x38, 0x30, 0x3f, 0x00, 0xb5, 0x83, 0x31, 0x38, 0x31, 0x3f, 0x00, 0xb6, 0x83, 0x31, 0x38, 0x32,
			0x3f, 0x00, 0xb7, 0x83, 0x31, 0x38, 0x33, 0x3f, 0x00, 0xb8, 0x83, 0x31, 0x38, 0x34, 0x3f, 0x00,
			0xb9, 0x83, 0x31, 0x38, 0x35, 0x3f, 0x00, 0xba, 0x83, 0x31, 0x38, 0x36, 0x3f, 0x00, 0xbb, 0x83,
			0x31, 0x38, 0x37, 0x3f, 0x00, 0xbc, 0x83, 0x31, 0x38, 0x38, 0x3f, 0x00, 0xbd, 0x83, 0x31, 0x38,
			0x39, 0x3f, 0x00, 0xbe, 0x83, 0x31, 0x39, 0x30, 0x3f, 0x00, 0xbf, 0x83, 0x31, 0x39, 0x31, 0x3f,
			0x00, 0xc0, 0x83, 0x31, 0x39, 0x32, 0x3f, 0x00, 0xc1, 0x83, 0x31, 0x39, 0x33, 0x3f, 0x00, 0xc2,
			0x83, 0x31, 0x39, 0x34, 0x3f, 0x00, 0xc3, 0x83, 0x31, 0x39, 0x35, 0x3f, 0x00, 0xc4, 0x83, 0x31,
			0x39, 0x36, 0x3f, 0x00, 0xc5, 0x83, 0x31, 0x39, 0x37, 0x3f, 0x00, 0xc6, 0x83, 0x31, 0x39, 0x38,
			0x3f, 0x00, 0xc7, 0x83, 0x31, 0x39, 0x39, 0x7f, 0x84, 0x74, 0x65, 0x73, 0x74, 0x32, 0x30, 0x30,
			0x3a, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x0f, 0x56, 0x3e, 0x55, 0x3f, 0x04, 0xd1,
			0x40, 0x20, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x42, 0x40,
			0x30, 0x00, 0x00, 0x43, 0x44, 0x45
		};

		readonly byte[] DoubleData = { 0x2c, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
		
		[Fact]
		public void Decoding() {
			var dec = Rencode.Decode(Data);
			var list = dec as List<object>;
			Assert.NotNull(list);
			Assert.Equal(16, list.Count);
			
			var flenlist = list[0] as List<object>;
			Assert.NotNull(flenlist);
			Assert.Equal(3, flenlist.Count);
			Assert.Equal("foo", flenlist[0]);
			Assert.Equal("bar", flenlist[1]);
			Assert.Equal("baz", flenlist[2]);
			
			var vlenlist = list[1] as List<object>;
			Assert.NotNull(vlenlist);
			Assert.Equal(999, vlenlist.Count);
			Assert.Equal(0, vlenlist[0]);

			var flendict = list[2] as Dictionary<object, object>;
			Assert.NotNull(flendict);
			Assert.Equal(2, flendict.Count);
			Assert.True(flendict.ContainsKey("foo"));
			Assert.Equal(flendict["foo"], "bar");
			Assert.True(flendict.ContainsKey("baz"));
			Assert.Equal(flendict["baz"], "hax");

			var vlendict = list[3] as Dictionary<object, object>;
			Assert.NotNull(vlendict);
			Assert.Equal(200, vlendict.Count);
			Assert.True(vlendict.ContainsKey(0));
			Assert.Equal(vlendict[0], "0");
			
			Assert.Equal("test", list[4]);
			Assert.Equal(new string('A', 200), list[5]);
			
			Assert.Equal(15, list[6]);
			Assert.Equal(-17, list[7]);
			Assert.Equal(85, list[8]);
			Assert.Equal(1233, list[9]);
			Assert.Equal(1 << 29, list[10]);
			Assert.Equal(1L << 37, list[11]);
			Assert.Equal(2.75f, list[12]);
			
			Assert.Equal(true, list[13]);
			Assert.Equal(false, list[14]);
			Assert.Equal(null, list[15]);
			
			Assert.Equal(2.75, Rencode.Decode(DoubleData));
		}

		[Fact]
		public void Roundtrip() {
			Assert.Equal(true, Rencode.Decode(Rencode.Encode(true)));
			Assert.Equal(false, Rencode.Decode(Rencode.Encode(false)));
			Assert.Equal(null, Rencode.Decode(Rencode.Encode(null)));
			Assert.Equal(0, Rencode.Decode(Rencode.Encode(0)));
			Assert.Equal(17, Rencode.Decode(Rencode.Encode(17)));
			Assert.Equal(-17, Rencode.Decode(Rencode.Encode(-17)));
			Assert.Equal(0x4012, Rencode.Decode(Rencode.Encode(0x4012)));
			Assert.Equal(0x40124012, Rencode.Decode(Rencode.Encode(0x40124012)));
			Assert.Equal(0x4012401240124012L, Rencode.Decode(Rencode.Encode(0x4012401240124012L)));
			Assert.Equal(0.5f, Rencode.Decode(Rencode.Encode(0.5f)));
			Assert.Equal(0.5, Rencode.Decode(Rencode.Encode(0.5)));
			
			Assert.Equal(Data, Rencode.Encode(Rencode.Decode(Data)));
		}
	}
}